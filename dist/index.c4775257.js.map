{"mappings":"AAAA,gCAAgC;AAEhC,MAAM,SAAS;AACf,MAAM,kBAAkB,SAAS,cAAc,CAAC;AAChD,MAAM,eAAe,SAAS,cAAc,CAAC;AAC7C,MAAM,cAAc,SAAS,cAAc,CAAC;AAC5C,IAAI,gBAAgB,EAAE;AAGtB,SAAS,cAAc,CAAC,iBAAiB,gBAAgB,CAAC,SAAS;IACjE,MAAM,cAAc,SAAS,cAAc,CAAC;IAC5C,YAAY,SAAS,CAAC,MAAM,CAAC;AAC/B;AAGA,SAAS,aAAa,CAAC,iBACpB,gBAAgB,CAAC,WAAW,SAAU,KAAK;IAC1C,IAAI,MAAM,GAAG,KAAK,SAChB,aAAa;AAEjB;AAEF,+BAA+B;AAC/B,SAAS,gBAAgB,CAAC,oBAAoB;AAE9C,SAAS;IACL,MAAM,CAAC,mDAAmD,EAAE,OAAO,CAAC,EACjE,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI,IAChC,IAAI,CAAC,CAAC;QACL,gBAAgB,KAAK,OAAO;QAC5B,cAAc;IAChB,GACC,KAAK,CAAC,CAAC,QAAU,QAAQ,GAAG,CAAC,0BAA0B;AAC5D;AAEA,SAAS,cAAc,MAAM;IAC3B,gBAAgB,SAAS,GAAG,IAAI,wBAAwB;IAExD,OAAO,OAAO,CAAC,CAAC;QACd,MAAM,YAAY,CAAC;;mDAE0B,EAAE,MAAM,WAAW,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC;;qDAEvC,EAAE,MAAM,KAAK,CAAC;0DACT,EAAE,MAAM,YAAY,CAAC;4CACnC,EAAE,MAAM,EAAE,CAAC;;;MAGjD,CAAC;QACD,gBAAgB,SAAS,IAAI;IAC/B;AACF;AAEA,0CAA0C;AAC5C,eAAe,eAAe,OAAO;IACnC,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,mCAAmC,EAAE,QAAQ,SAAS,EAAE,OAAO,CAAC;QAC9F,MAAM,QAAQ,MAAM,SAAS,IAAI;QACjC,IAAI,YAAY,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,iBAAiB,EAAE;QAEnE,iDAAiD;QACjD,MAAM,cAAc,UAAU,IAAI,CAAC,CAAA,WAAY,SAAS,EAAE,KAAK,MAAM,EAAE;QAEvE,IAAI,CAAC,aAAa;YACd,UAAU,IAAI,CAAC,QAAQ,4CAA4C;YACnE,aAAa,OAAO,CAAC,aAAa,KAAK,SAAS,CAAC;YACjD,MAAM,CAAC,EAAE,MAAM,KAAK,CAAC,oBAAoB,CAAC;QAC9C,OACI,MAAM,CAAC,EAAE,MAAM,KAAK,CAAC,8BAA8B,CAAC;IAE1D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;IACzC;AACF;AAEA,SAAS,aAAa,MAAM;IAC1B,MAAM,QAAQ,SAAS,aAAa,CAAC,iBAAiB,KAAK,CAAC,WAAW;IAEvE,yDAAyD;IACzD,MAAM,iBAAiB,OAAO,MAAM,CAAC,CAAC,QAAU,MAAM,KAAK,CAAC,WAAW,GAAG,UAAU,CAAC;IAErF,8DAA8D;IAC9D,IAAI,eAAe,MAAM,GAAG,GAAG;QAC7B,cAAc;QAEd,mEAAmE;QACnE,SAAS,cAAc,CAAC,oBAAoB,cAAc,CAAC;YAAE,UAAU;QAAS;IAClF,OACE,uCAAuC;IACvC,MAAM,CAAC,+BAA+B,EAAE,MAAM,EAAE,CAAC;AAErD","sources":["main.js"],"sourcesContent":["// Import necessary dependencies\n\nconst apiKey = \"146c2867b133120789aa9d2e0de77730\";\nconst moviesContainer = document.getElementById(\"movies-container\");\nconst toggleButton = document.getElementById('navbar-toggle');\nconst navbarLinks = document.getElementById('navbar-links');\nlet allMoviesData = [];\n\n\ndocument.getElementById('navbar-toggle').addEventListener('click', function () {\n  const navbarLinks = document.getElementById('navbar-links');\n  navbarLinks.classList.toggle('hidden');\n});\n\n\ndocument.querySelector(\"#search-movie\")\n  .addEventListener(\"keydown\", function (event) {\n    if (event.key === \"Enter\") {\n      searchMovies(allMoviesData);\n    }\n  });\n\n// Fetch popular movies on load\ndocument.addEventListener(\"DOMContentLoaded\", fetchPopularMovies);\n\nfunction fetchPopularMovies() {\n    fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}`)\n      .then((response) => response.json())\n      .then((data) => {\n        allMoviesData = data.results; \n        displayMovies(allMoviesData); \n      })\n      .catch((error) => console.log(\"Error fetching movies:\", error));\n  }\n\n  function displayMovies(movies) {\n    moviesContainer.innerHTML = \"\"; // Clear previous movies\n    \n    movies.forEach((movie) => {\n      const movieCard = `\n        <div class=\"bg-white rounded-lg shadow-md p-4 transition-transform transform hover:scale-105\">\n          <img src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\" alt=\"${movie.title}\" class=\"w-full h-auto object-cover rounded-t-lg\">\n          <div class=\"mt-4\">\n            <h3 class=\"text-lg md:text-xl font-bold\">${movie.title}</h3>\n            <p class=\"text-gray-500 text-sm md:text-base\">${movie.release_date}</p>\n            <button onclick=\"addToFavorites(${movie.id})\" class=\"bg-[#6DC8C8] hover:bg-[#5ababa] text-white py-2 px-4 mt-4 block w-full text-center rounded-md\">Add to Favorites</button>\n          </div>\n        </div>\n      `;\n      moviesContainer.innerHTML += movieCard;\n    });\n  }\n\n  // Used async/await instead of .then/catch\nasync function addToFavorites(movieId) {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}`);\n    const movie = await response.json();\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n\n    // Check if the movie is already in the favorites\n    const movieExists = favorites.some(favMovie => favMovie.id === movie.id);\n\n    if (!movieExists) {\n        favorites.push(movie); // Add the movie if it doesn't already exist\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n        alert(`${movie.title} added to favorites!`);\n    } else {\n        alert(`${movie.title} is already in your favorites!`);\n    }\n  } catch (error) {\n    console.error('Error fetching movie:', error);\n  }\n}\n\nfunction searchMovies(movies) {\n  const input = document.querySelector(\"#search-movie\").value.toLowerCase();\n\n  // Filter movies where titles start with the search input\n  const filteredMovies = movies.filter((movie) => movie.title.toLowerCase().startsWith(input));\n\n  // If movies are found, display them; otherwise, show an alert\n  if (filteredMovies.length > 0) {\n    displayMovies(filteredMovies);\n    \n    // Scroll to the movies section after displaying the search results\n    document.getElementById(\"movies-container\").scrollIntoView({ behavior: \"smooth\" });\n  } else {\n    // Show an alert if no movies are found\n    alert(`No movies found starting with \"${input}\".`);\n  }\n}\n"],"names":[],"version":3,"file":"index.c4775257.js.map","sourceRoot":"/__parcel_source_root/"}